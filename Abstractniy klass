#include<iostream>

using namespace std;

class Figure
{
public:
    virtual double Area() = 0;
    virtual double Perimetr() = 0;
    virtual void Show() = 0;
    virtual ~Figure() {}
};

class Circle : public Figure
{
    double r;
public:
    Circle(double _r) : r(_r) {}
    ~Circle() {}
    double Area()
    { 
        cout << "Площадь = ";
        return 3.14 * r * r;
    }
    double Perimetr()
    { 
        cout << "Периметр = ";
        return 3.14 * 2 * r;
    }
    void Show()
    { 
        cout << " Круг " << endl; 
    }
};

class Rectangle : public Figure
{
    double a, b;
public:
    Rectangle(double _a, double _b) : a(_a), b(_b) {}
    ~Rectangle() {}
    double Area()
    { 
        cout << "Площадь = ";
        return a * b;
    }
    double Perimetr()
    { 
        cout << "Периметр = ";
        return 2 * a * b;
    }
    void Show()
    { 
        cout << " Прямоугольник " << endl;
    }
};

class Triangle : public Figure
{
    double a, b, c, h;
public:
    Triangle(double _a, double _b, double _c, double _h) : a(_a), b(_b), c(_c), h(_h) {}
    ~Triangle() {}

    double Area()
    {
        cout << "Площадь = ";
        return ((b * h) / 2);
    }
    double Perimetr()
    {
        cout << "Периметр = ";
        return a + b + c;
    }
    void Show()
    {
        cout << " Треугольник " << endl;
    }

};

int main()
{
    setlocale(LC_ALL, "RU");
    Figure* figure[3];
    figure[0] = new Triangle(3, 4, 5, 5);
    figure[1] = new Circle(5);
    figure[2] = new Rectangle(4, 5);
    for (int i = 0; i < 3; i++)
    {
        figure[i]->Show();
        cout << figure[i]->Area() << endl;
        cout << figure[i]->Perimetr() << endl;
        delete figure[i];
    }
    return 0;
}
