#include <iostream>

using namespace std;

class Animal
{
public:
    Animal(float mass, char* gender, char* colour, int age) :Mass(mass), Age(age)
    {
        Gender = gender;
        Color = colour;
    }
    virtual ~Animal()
    {
    }
    const float GetMass() const
    {
        return Mass;
    }
    const char* GetGender() const
    {
        return Gender;
    }
    const char* GetColour() const
    {
        return Color;
    }
    const int GetAge() const
    {
        return Age;
    }
    Animal& operator --();
protected:
    float Mass;
    char* Gender;
    char* Color;
    int Age;
};

class Dog :public Animal
{
public:
    Dog(float mass, char* gender, char* color, int age, char* name, char* race, char* type) :
        Animal(mass, gender, color, age)
    {
        Name = name;
        Race = race;
        Type = type;
    }
    ~Dog()
    {
    }
    const char* GetName() const
    {
        return Name;
    }
    const char* GetType() const
    {
        return Type;
    }
    const char* GetRace() const
    {
        return Race;
    }
private:
    char* Name;
    char* Race;
    char* Type;
};

Animal& Animal::operator --()
{
    if (Mass >= 0.1)
        Mass -= 0.1;
    return *this;
}

int main()
{
    Dog Shar(15.8, "m", "white", 2, "Sharik", "Angl dog", "Hunter");
    cout << Shar.GetName() << '\n';
    cout << Shar.GetType() << '\n';
    cout << Shar.GetGender() << '\n';
    cout << Shar.GetColour() << '\n';
    cout << Shar.GetAge() << '\n';
    cout << Shar.GetMass() << '\n';
    --Shar;
    cout << Shar.GetMass() << '\n';
    return 0;
}
